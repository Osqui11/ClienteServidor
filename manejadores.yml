#crear namespace
apiVersion: v1
kind: Namespace
metadata: 
  name: manejadores-namespace
---
#POSTGRESQL
# Volumen persistente 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-postgres-vol
  namespace: manejadores-namespace
spec:
  storageClassName: postgres
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/postgres-vol"
---
#reclamo de volumen de persistencia
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-postgres
  namespace: manejadores-namespace
spec:
  storageClassName: postgres
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
#storage class postgres
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: postgres
  namespace: manejadores-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
#configMap para postgres
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: manejadores-namespace
  labels:
    app: postgres-server
data:
  POSTGRES_USER: root
  POSTGRES_PASSWORD: secret
---
#postgres deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: manejadores-namespace
  labels:
    app: postgres-server
spec:
  selector:
    matchLabels:
      app: postgres-server
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres-server
    spec:
      containers:
      - image: postgres:11
        name: postgres-db1
        ports:
        - containerPort: 5432
          protocol: TCP  
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-db-volume
        envFrom:
            - configMapRef:
                name: postgres-config
      volumes:
      - name: postgres-db-volume
        persistentVolumeClaim:
          claimName: pvc-postgres
---
#servicio para postgres
apiVersion: v1
kind: Service
metadata: 
  name: service-postgres
  namespace: manejadores-namespace
spec:
  selector:
    app: postgres-server
  ports:
    - port: 5300
      targetPort: 5432
  type: LoadBalancer
---
#MYSQL
#volumen persistente
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mysql-vol
  namespace: manejadores-namespace  
spec:
  storageClassName: mysql
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mysql-vol"
---
#reclamo de volumen persistente
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mysql
  namespace: manejadores-namespace
spec:
  storageClassName: mysql
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
#storage class
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mysql
  namespace: manejadores-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
#config map mysql
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: manejadores-namespace
  labels:
    app: mysql-server
data:

  MYSQL_ROOT_PASSWORD: secret
---
#deployment mysql
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: manejadores-namespace
  labels:
    app: mysql-server
spec:
  selector:
    matchLabels:
      app: mysql-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql-server
    spec:
      containers:
      - image: mysql:8.0
        name: mysql-db1
        ports:
        - containerPort: 3306
          protocol: TCP  
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-db-volume
        envFrom:
            - configMapRef:
                name: mysql-config
      volumes:
      - name: mysql-db-volume
        persistentVolumeClaim:
          claimName: pvc-mysql
---
#servicio mysql
apiVersion: v1
kind: Service
metadata: 
  name: service-mysql
  namespace: manejadores-namespace
spec:
  selector:
    app: mysql-server
  ports:
    - port: 5303
      targetPort: 3306
  type: LoadBalancer
---
#MONGO
#volumen persistente
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-mongo-vol
  namespace: manejadores-namespace
spec:
  storageClassName: mongo
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/mongo-vol" 
---
#reclamo de volumen persistente
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mongo
  namespace: manejadores-namespace
spec:
  storageClassName: mongo
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi 
---
#storage class mongo
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mongo
  namespace: manejadores-namespace
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
#config map mongo
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-config
  namespace: manejadores-namespace
  labels:
    app: mongo-server
data:
  MONGO_USER: root
  MONGO_PASSWORD: secret
---
#deployment mongo
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongo-deployment
  namespace: manejadores-namespace
  labels:
    app: mongo-server
spec:
  selector:
    matchLabels:
      app: mongo-server
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo-server
    spec:
      containers:
      - image: mongo:4.0.23
        name: mongo-db1
        ports:
        - containerPort: 27017
          protocol: TCP  
        volumeMounts:
        - mountPath: /data/db
          name: mongo-db-volume
        envFrom:
            - configMapRef:
                name: mongo-config
      volumes:
      - name: mongo-db-volume
        persistentVolumeClaim:
          claimName: pvc-mongo
---
#servicio de mongo
apiVersion: v1
kind: Service
metadata: 
  name: service-mongo
  namespace: manejadores-namespace
spec:
  selector:
    app: mongo-server
  ports:
    - port: 5302
      targetPort: 27017
  type: LoadBalancer
---
#REDIS
# Volumen persistente 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-redis-vol
  namespace: manejadores-namespace  
spec:
  storageClassName: redis
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/redis-vol"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-redis
  namespace: manejadores-namespace
spec:
  storageClassName: redis
  accessModes:
    - ReadWriteOnce
  resources: 
    requests:
      storage: 5Gi 
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: redis
  namespace: manejadores-namespace
provisioner: kubernetes.io/no-provisioner 
reclaimPolicy: Retain 
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-configmap
  namespace: manejadores-namespace
  labels:
    app: redis-server
data:
  REDIS_USER: root
  REDIS_PASSWORD: secret
---
#Hacer deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
  namespace: manejadores-namespace
  labels:
    app: redis-server
spec:
  selector:
    matchLabels:
      app: redis-server
  replicas: 1
  template:
    metadata:
      labels:
        app: redis-server
    spec:
      containers:
      - image: redis:6.2.0  #docker pull image
        name: redis-db1
        ports:
        - containerPort: 6379
          protocol: TCP  
        volumeMounts:
        - mountPath: /redis-master-data
          name: redis-db-volume
        envFrom:
            - configMapRef:
                name: redis-configmap
      volumes:
      - name: redis-db-volume
        persistentVolumeClaim:
          claimName: pvc-redis
---
#Crear servicio
apiVersion: v1
kind: Service
metadata: 
  name: service-redis
  namespace: manejadores-namespace
spec:
  selector:
    app: redis-server 
  ports:
    - port: 5301
      targetPort: 6379
  type: LoadBalancer